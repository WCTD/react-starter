{"version":3,"sources":["logo.svg","pages/HomePage.js","pages/AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","react_default","a","createElement","Jumbotron","src","logo","className","alt","href","target","rel","Component","AboutPage","App","HashRouter","Navbar","color","light","NavbarBrand","Nav","NavItem","NavLink","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oUC6BzBC,mLApBX,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzCP,EAAAC,EAAAC,cAAA,MAAII,UAAU,aAAd,qBACAN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,kCADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEI,UAAU,WACVE,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,uBATaC,aCYRC,mLAXX,OACIZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,MAAII,UAAU,aAAd,SACAN,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,kCADP,gCALcS,aCmCTE,mLAtBX,OACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,GACzBjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAaV,KAAK,MAAlB,eACAR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAASb,KAAK,WAAd,UAEFR,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAASb,KAAK,wCAAd,gBAINR,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjCC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWb,aAjBxBD,aCLEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECTNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13bcd4bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from '../logo.svg';\n\nimport {\n  Jumbotron\n} from 'reactstrap';\n\nclass HomePage extends Component {\n  render() {\n    return (\n        <Jumbotron>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"display-3\">React Starter Kit</h1>\n          <p>\n            Edit <code>src/pages/index.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </Jumbotron>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\n\nimport {\n  Jumbotron\n} from 'reactstrap';\n\nclass AboutPage extends Component {\n  render() {\n    return (\n        <Jumbotron>\n          <h1 className=\"display-3\">About</h1>\n          <p>\n            Edit <code>src/pages/about.js</code> and save to reload.\n          </p>\n        </Jumbotron>\n    );\n  }\n}\n\nexport default AboutPage;\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport {\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavItem,\n  NavLink,\n} from 'reactstrap';\n\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar color=\"light\" light>\n            <NavbarBrand href=\"#/\">Starter Kit</NavbarBrand>\n            <Nav>\n              <NavItem>\n                <NavLink href=\"#/about\">About</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://www.we-connect-the-dots.org/\">WCTD Home</NavLink>\n              </NavItem>\n            </Nav>\n          </Navbar>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/about\" component={AboutPage} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import the bootstrap look and feel\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}